# Case Matters (at least by default)
# Specify which assignment the grading is going to grade
# Provide the canonical name of the class that extends FrameworkProjectRequirements or implements ProjectRequirements
#
# The following classes are available for the COMP 401 (F13) assignments:
#   gradingTools.assignment1.Assignment1ProjectRequirements
#   gradingTools.assignment2.Assignment2ProjectRequirements
#   gradingTools.assignment3.Assignment3ProjectRequirements
#   gradingTools.assignment6.Assignment6ProjectRequirements
#   gradingTools.assignment7.Assignment7ProjectRequirements
#   gradingTools.assignment8.Assignment8ProjectRequirements
#   gradingTools.assignment9.Assignment9ProjectRequirements
#   gradingTools.assignment10.Assignment10ProjectRequirements
# For these, use AssignmentX as the project name.
#
# The following classes are available for the COMP 110 (S14) assignments
#   gradingTools.comp110.program0.Program0Requirements
#	gradingTools.comp110.assignment1.Assignment1Requirements
# For these, use ProgramX as the project name.
project.requirements = gradingTools.comp110.assignment2.Assignment2Requirements
project.name = Assignment2
#project.requirements = gradingTools.example.ExampleProjectRequirements
#project.name = Example
#
# syntax of the clsas that has the requirements
default.requirements = gradingTools.{modulename}.{problemname}.{problemName}Requirements
Comp401.requirements = gradingTools.{problemname}
Comp110.requirements = gradingTools.comp110.{problemname}.{problemName}Requirements
 


# You can specify which grading controller you want to use
# The options are "GradingManager" (the 'framework' package) or "SakaiProjectDatabase" (the 'grader' package)
#grader.controller = GradingManager
grader.controller = SakaiProjectDatabase

# You can specify which settings user interface you want to use for the SakaiProjectDatabase controller
# The options are "intellij" ( intellij UI from the 'framework' package) or "oe" (the OE UI from the 'grader' package)
#grader.settings = intellij
grader.settings = oe

#Each module has problems whose suffixes have identifies

modules = Comp110, Comp401, Comp401Recitations
#module problems are names prefix1, prefix2, ... prefix<int>, with default of Assignment
default.problems.prefix = Assignment
Comp401Recitations.problems.prefix = Recitation



# what action to take on the stepper when a student project is visited by the setter
default.visitActions = autoGrade
#Comp110.visitActions = autoGrade
Comp401.Assignment5.visitActions = autoRun, autoGrade

# You can specify how you want the scores saved. You can choose any number of methods.
#   feedback-txt :  This saves a text file in the students' feedback folder
#   feedback-json : This saves a json file in the students' feedback folder
#   feedback :      Equivalent to "feedback-txt + feedback-json"
#   local-txt :     This saves a text file in a local log folder
#   local-json :    This saves a json file in the local log folder
#   local :         Equivalent to "local-txt + local-json"
#   spreadsheet :   This saves all the scores in a spreadsheet
#
# Combine methods with the plus '+' character. Here are some examples:
#   grader.controller.logger = csv
#   grader.controller.logger = feedback-txt + feedback-json
#   grader.controller.logger = local+feedback
#grader.logger = feedback + spreadsheet + csv
#lazy coding means feedback should be the last step so that isSaved works correctly
grader.logger = spreadsheet + csv + feedback

# For the spreadsheet, you can specify the location and name of the file.
# If you want to include the project name in the path, use {projectName}.
# The extension should be .xlsx (Excel spreadsheet)
#
# Example:
#   /tmp/log/{projectName}/grades.xlsx
# You can also specify a local path:
#   ./grades.xlsx
#grader.logger.spreadsheetFilename = ./log/{projectName}/grades.xlsx
grader.logger.spreadsheetFilename = ./log/{moduleName}/{problemName}/grades.xlsx


# Grader data folder name
grader.defaultAssignmentsDataFolderName = ./log/AssignmentsData/{moduleName}

#settings file
grader.settings = .gradersettings
#dynamic configuration, replaces grader settings
grader.dynamicConfiguration = dynamicconfig.properties

# If you are using SakaiProjectDatabase, then there are further customizations
# Set to true if you want to use the GUI from GraderManager
grader.controller.useFrameworkGUI = false


# =====  Test Case Configuration  =====
# The following configurations are used for the test cases.
# Note that all paths need to be absolute.

# This is the path so some "Bulk download" folder
test.exampleSakai.path = ./Test Data/Example Bulk
test.exampleSakai.projectName = project

# This is the path to and info of an on-time submitted project
# This project must have at least one class tagged
test.exampleSakai.example1.path = ./Test Data/Example Bulk/Sakai\\, Project(skproject)
test.exampleSakai.example1.onyen = skproject
test.exampleSakai.example1.userId = Sakai\\, Project(skproject)
test.exampleSakai.example1.project = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project
test.exampleSakai.example1.build = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project/bin
test.exampleSakai.example1.source = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project/src
test.exampleSakai.example1.tag = Printer
test.exampleSakai.example1.simpleName = SimplePrinter
test.exampleSakai.example1.canonicalName = main.ReversePrinter


# This is the path to and info of a non-submitted project
test.exampleSakai.example2.path = ./Test Data/Example Bulk/Submission\\, None(nosub)
test.exampleSakai.example2.onyen = nosub
test.exampleSakai.example2.userId = Submission\\, None(nosub)
